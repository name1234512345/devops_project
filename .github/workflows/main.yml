name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKERHUB_USERNAME: 'kateilievsk123'
  DOCKERHUB_REPO: 'kateilievsk123'
  IMAGE_TAG: 'latest'
  KUBE_NAMESPACE: 'gitactions_test'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Images
        run: docker compose build

      - name: Login to Docker Hub
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

      - name: Tag and Push Docker Images
        run: |
          services=(service1 service2)
          for service in "${services[@]}"; do
            docker tag ${service}:latest ${DOCKERHUB_REPO}/${service}:${IMAGE_TAG}
            docker push ${DOCKERHUB_REPO}/${service}:${IMAGE_TAG}
          done

      - name: Deploy to Docker and Start Containers
        run: docker compose up -d

      - name: Check Container Logs
        run: docker logs service1

      - name: Check Running Containers
        run: docker ps

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes Credentials
        run: echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/service1-deployment.yaml --validate=false
          kubectl apply -f k8s/service1.yaml --validate=false
          kubectl apply -f k8s/service2-deployment.yaml --validate=false
          kubectl apply -f k8s/service2.yaml --validate=false

      - name: Verify Deployment
        run: |
          kubectl get pods -n $KUBE_NAMESPACE
          kubectl get svc -n $KUBE_NAMESPACE

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Stop and Remove Docker Containers
        run: docker compose down
